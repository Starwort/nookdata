{"version":3,"sources":["pages/turnips/components/Chart/index.tsx","pages/turnips/page.tsx"],"names":["Chart","props","chart","chartElement","exportChart","bind","destroyChart","loadData","redraw","setChart","setChartElementRef","unloadData","updateConfig","this","updateChart","nextProps","isPure","a","b","aKeys","Object","keys","bKeys","length","index","key","shallowEqual","destroy","mimeType","onExported","undefined","console","error","export","preserveAspectRatio","data","load","flush","config","className","domProps","style","unloadBeforeLoad","bb","generate","bindto","element","unload","dataToLoad","name","value","ref","React","Component","displayName","getInstances","instance","patternNames","Pattern","FLUCTUATING","LARGE_SPIKE","DECREASING","SMALL_SPIKE","AGGREGATE","UNKNOWN","weekDays","Graph","result","t","useTranslation","theme","useTheme","patterns","filter","pattern","xValues","day","columns","colours","names","n","column","hours","hour","push","low","min","high","max","mid","avg","toFixed","patternChance","chance","patternColours","Math","log2","Card","margin","CardContent","colors","type","areaSplineRange","legend","show","axis","x","tick","format","values","range","count","rotate","multiline","tooltip","culling","Grid","container","spacing","map","item","xs","sm","lg","backgroundColor","light","color","dark","CardHeader","title","titleTypographyProps","variant","fsum","Turnips","log","useData","settings","turnips","updateData","useState","confirmOpen","setConfirmOpen","noConfirm","setNoConfirm","makesSense","dataMakesSense","setData","reset","newData","clone","emptyWeek","previousPattern","knownPattern","isXs","useMediaQuery","breakpoints","up","firstBuy","Tooltip","FormControlLabel","control","Checkbox","checked","onChange","event","target","label","useMemo","calculate","graph","Helmet","pageTitle","maxWidth","TextField","fullWidth","buy","Fragment","am","pm","FormControl","InputLabel","id","Select","labelId","MenuItem","Button","height","onClick","turnipNoConfirm","display","justifyContent","palette","main","paddingRight","Warning","Typography","Dialog","open","DialogTitle","DialogContent","DialogActions"],"mappings":"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","file":"static/js/6.d4b83282.chunk.js","sourcesContent":["import {\n    ArrayOrString, bb, Chart as BBChart, Data, PrimitiveArray\n} from 'billboard.js';\nimport 'billboard.js/dist/billboard.css';\nimport React from 'react';\nimport {Dict} from '../../../../misc';\nimport './dark.scss';\nimport {ChartProps} from './types';\n// lifted from react-billboardjs and modified to work in typescript\n/* MIT License\n\nCopyright (c) 2017 Tony Quetano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. */\nfunction shallowEqual(a: Dict<any>, b: Dict<any>) {\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    const length = aKeys.length;\n\n    if (length !== bKeys.length) {\n        return false;\n    }\n\n    let index = -1;\n\n    while (++index < length) {\n        const key = aKeys[index];\n\n        if (key !== bKeys[index] || a[key] !== b[key]) {\n            return false;\n        }\n    }\n\n    return true;\n}\nclass Chart extends React.Component<ChartProps> {\n    static displayName = 'Chart';\n    chart: BBChart | null;\n    chartElement: HTMLDivElement | null;\n\n    static getInstances = () => {\n        return bb.instance;\n    };\n\n    constructor(props: ChartProps) {\n        super(props);\n\n        this.chart = null;\n        this.chartElement = null;\n\n        // Explicit binds instead of arrow functions for lower memory footprint.\n        this.exportChart = this.exportChart.bind(this);\n        this.destroyChart = this.destroyChart.bind(this);\n        this.loadData = this.loadData.bind(this);\n        this.redraw = this.redraw.bind(this);\n        this.setChart = this.setChart.bind(this);\n        this.setChartElementRef = this.setChartElementRef.bind(this);\n        this.unloadData = this.unloadData.bind(this);\n        this.updateConfig = this.updateConfig.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateChart();\n    }\n\n    shouldComponentUpdate(nextProps: ChartProps) {\n        return !nextProps.isPure || !shallowEqual(this.props, nextProps);\n    }\n\n    componentDidUpdate() {\n        this.updateChart();\n    }\n\n    componentWillUnmount() {\n        this.destroyChart();\n    }\n\n    destroyChart() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n\n        this.chart = null;\n    }\n\n    exportChart(mimeType: string, onExported: ((dataUrl: string) => string) | undefined = undefined) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error('No chart is available to export.');\n        }\n\n        this.chart.export({mimeType, preserveAspectRatio: true}, onExported);\n    }\n\n    loadData(data: Data) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'No chart is available to which data can be loaded. It may already have been destroyed, or has never been drawn.',\n            );\n        }\n\n        this.chart.load(data as {\n            url?: string;\n            json?: [{[key: string]: string;}];\n            rows?: PrimitiveArray[];\n            columns?: PrimitiveArray[];\n            data?: Array<{[key: string]: number;}>;\n            names?: {[key: string]: string;};\n            xs?: {[key: string]: string;};\n            classes?: {[key: string]: string;};\n            categories?: string[];\n            axes?: {[key: string]: string | string[];};\n            colors?: {[key: string]: string;};\n            headers?: {[key: string]: string;};\n            keys?: {[key: string]: string;};\n            mimeType?: string;\n            type?: string;\n            types?: {[key: string]: string;};\n            unload?: boolean | ArrayOrString;\n            done?: () => any;\n        });\n    }\n\n    redraw() {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error('No chart is available to draw.');\n        }\n\n        this.chart.flush();\n    }\n\n    setChart(data: Data) {\n        if (this.chart) {\n            this.loadData(data);\n        } else {\n            const {\n                className: classNameIgnored,\n                domProps: domPropsIgnored,\n                isPure: isPureIgnored,\n                style: styleIgnored,\n                unloadBeforeLoad: unloadBeforeLoadIgnored,\n                ...config\n            } = this.props;\n\n            this.chart = bb.generate({\n                bindto: this.chartElement,\n                ...config,\n            });\n        }\n    }\n\n    setChartElementRef(element: HTMLDivElement) {\n        this.chartElement = element;\n    }\n\n    unloadData(data: any) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'No chart is available from which data can be unloaded. It may already have been destroyed, or has never been drawn.',\n            );\n        }\n\n        this.chart.unload(data);\n    }\n\n    updateChart() {\n        const {data, unloadBeforeLoad} = this.props;\n        const dataToLoad = unloadBeforeLoad ? {...data, unload: true} : data;\n\n        this.setChart(dataToLoad);\n    }\n\n    updateConfig(name: string, value: any, redraw: boolean | undefined) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'You are trying to set the config a chart that does not exist.' +\n                'Have you passed `data`?',\n            );\n        }\n\n        return this.chart.config(name, value, redraw);\n    }\n\n    render() {\n        const {className, domProps, style} = this.props;\n\n        return (\n            <div\n                className={className}\n                style={style}\n                {...domProps}\n                ref={this.setChartElementRef}\n            />\n        );\n    }\n}\nexport default Chart;\n","import {\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Checkbox,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n    Typography,\n    useMediaQuery,\n    useTheme\n} from \"@material-ui/core\";\nimport {Warning} from \"@material-ui/icons\";\nimport {areaSplineRange} from 'billboard.js';\nimport React from \"react\";\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {Centred} from '../../components';\nimport {useData} from \"../../context\";\nimport {clone, DeepPartial, Dict, fsum, range} from \"../../misc\";\nimport {Chart} from './components';\nimport {calculate, dataMakesSense, emptyWeek, knownPattern, Pattern, patternColours, TurnipsResult, UserTurnipsData} from \"./data\";\n\nconst patternNames = {\n    [Pattern.FLUCTUATING]: \"turnips:graph.fluctuating\",\n    [Pattern.LARGE_SPIKE]: \"turnips:graph.large_spike\",\n    [Pattern.DECREASING]: \"turnips:graph.decreasing\",\n    [Pattern.SMALL_SPIKE]: \"turnips:graph.small_spike\",\n    [Pattern.AGGREGATE]: \"turnips:graph.aggregate\",\n    [Pattern.UNKNOWN]: \"Something went wrong. Sorry.\",\n};\n\nconst weekDays: ('mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat')[] = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\nfunction transform(length: number) {\n    return Math.log2(length) + 1;\n}\n\nfunction Graph({result}: {result: TurnipsResult[];}) {\n    const {t} = useTranslation(['core', 'turnips']);\n    const theme = useTheme();\n    const patterns = {\n        [Pattern.FLUCTUATING]: result.filter(result => result.pattern === Pattern.FLUCTUATING),\n        [Pattern.LARGE_SPIKE]: result.filter(result => result.pattern === Pattern.LARGE_SPIKE),\n        [Pattern.DECREASING]: result.filter(result => result.pattern === Pattern.DECREASING),\n        [Pattern.SMALL_SPIKE]: result.filter(result => result.pattern === Pattern.SMALL_SPIKE),\n        [Pattern.AGGREGATE]: [result[0]],\n        [Pattern.UNKNOWN]: [] as TurnipsResult[],\n    };\n    if (result.length) {\n        let xValues = [\n            t('turnips:graph.buy'),\n            t('core:time.meridian.am.short_day', {day: t(`core:time.weekday.mon.short`)}),\n            t('core:time.meridian.pm.short_day', {day: t(`core:time.weekday.mon.short`)}),\n            t('core:time.meridian.am.short_day', {day: t(`core:time.weekday.tue.short`)}),\n            t('core:time.meridian.pm.short_day', {day: t(`core:time.weekday.tue.short`)}),\n            t('core:time.meridian.am.short_day', {day: t(`core:time.weekday.wed.short`)}),\n            t('core:time.meridian.pm.short_day', {day: t(`core:time.weekday.wed.short`)}),\n            t('core:time.meridian.am.short_day', {day: t(`core:time.weekday.thu.short`)}),\n            t('core:time.meridian.pm.short_day', {day: t(`core:time.weekday.thu.short`)}),\n            t('core:time.meridian.am.short_day', {day: t(`core:time.weekday.fri.short`)}),\n            t('core:time.meridian.pm.short_day', {day: t(`core:time.weekday.fri.short`)}),\n            t('core:time.meridian.am.short_day', {day: t(`core:time.weekday.sat.short`)}),\n            t('core:time.meridian.pm.short_day', {day: t(`core:time.weekday.sat.short`)}),\n        ];\n        let columns: [string, ...{high: number, low: number, mid: string;}[]][] = [\n        ];\n        let colours: Dict<string> = {};\n        let names: Dict<string> = {};\n        let n = 0;\n        for (let pattern of result) {\n            // for (let pattern of filteredResult) {\n            let column: [string, ...{high: number, low: number, mid: string;}[]] = [`data${n}`];\n            for (let hour of pattern.hours) {\n                column.push({low: hour.min, high: hour.max, mid: hour.avg.toFixed(2)});\n            }\n            columns.push(column);\n            names[`data${n}`] = t(patternNames[pattern.pattern], {patternChance: (pattern.chance * 100).toFixed(2)});\n            colours[`data${n++}`] = patternColours[theme.name][pattern.pattern](pattern.chance * transform(patterns[pattern.pattern].length));\n        }\n        return <>\n            <Card style={{margin: 16}}>\n                <CardContent>\n                    <Chart\n                        key={theme.name}  // this is very hacky but if I don't do it switching theme completely breaks the graph\n                        isPure\n                        className={`chart ${theme.name}`}\n                        data={{\n                            columns: columns as any,\n                            colors: colours,\n                            names,\n                            type: areaSplineRange(),\n                        }}\n                        legend={{\n                            // position: 'right',\n                            show: false\n                        }}\n                        axis={{\n                            x: {\n                                tick: {\n                                    format: (x: number) => (xValues[x]),\n                                    values: range(13),\n                                    count: 13,\n                                    rotate: 90,\n                                    multiline: false,\n                                    tooltip: true,\n                                    culling: false,\n                                },\n                            }\n                        }}\n                    />\n                </CardContent>\n            </Card>\n            <div style={{margin: '0 16px'}}>\n                <Grid container spacing={2}>\n                    {[Pattern.SMALL_SPIKE, Pattern.LARGE_SPIKE, Pattern.FLUCTUATING, Pattern.DECREASING].map(pattern =>\n                        <Grid item xs={12} sm={6} lg={3} key={pattern}>\n                            <Card\n                                style={{\n                                    backgroundColor: theme.name === 'light' ? patternColours.light[pattern](1) : undefined,\n                                    color: theme.name === 'light' ? undefined : patternColours.dark[pattern](1),\n                                }}\n                            >\n                                <CardHeader\n                                    title={{\n                                        [Pattern.SMALL_SPIKE]: t('turnips:pattern.small_spike'),\n                                        [Pattern.LARGE_SPIKE]: t('turnips:pattern.large_spike'),\n                                        [Pattern.FLUCTUATING]: t('turnips:pattern.fluctuating'),\n                                        [Pattern.DECREASING]: t('turnips:pattern.decreasing'),\n                                        [Pattern.AGGREGATE]: 'Something went wrong',\n                                        [Pattern.UNKNOWN]: 'Something went wrong',\n                                    }[pattern]}\n                                    titleTypographyProps={{\n                                        variant: 'h6',\n                                    }}\n                                />\n                                <CardContent>\n                                    <Centred>\n                                        {(fsum(patterns[pattern].map(result => result.chance)) * 100).toFixed(2)}%\n                                    </Centred>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    )}\n                </Grid>\n            </div>\n        </>;\n    } else {\n        return null;\n    }\n}\n\nexport default function Turnips() {\n    console.log(\"render!\");\n    const {settings, turnips: data, updateData} = useData();\n    const [confirmOpen, setConfirmOpen] = React.useState(false);\n    const [noConfirm, setNoConfirm] = React.useState(false);\n    let makesSense = dataMakesSense(data);\n    function setData(data: DeepPartial<UserTurnipsData>) {\n        updateData({turnips: data});\n    }\n    function confirm() {\n        if (noConfirm) {\n            updateData({settings: {turnipNoConfirm: true}});\n        }\n        setConfirmOpen(false);\n        reset();\n    }\n    function nextWeek() {\n        if (settings.turnipNoConfirm) {\n            reset();\n        } else {\n            setConfirmOpen(true);\n        }\n    }\n    function reset() {\n        let newData = clone(emptyWeek);\n        newData.previousPattern = knownPattern(data);\n        setData(newData);\n    }\n    const {t} = useTranslation(['core', 'turnips']);\n    const theme = useTheme();\n    const isXs = !useMediaQuery(theme.breakpoints.up('sm'));\n    const firstBuy = <Grid item xs={12} sm={6}>\n        <Centred>\n            <Tooltip\n                title={t('turnips:prices.first_buy.hover') as string}\n            >\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={data.firstBuy}\n                            onChange={(event) => setData({firstBuy: event.target.checked})}\n                            color=\"primary\"\n                        />\n                    }\n                    label={t('turnips:prices.first_buy.checkbox')}\n                />\n            </Tooltip>\n        </Centred>\n    </Grid>;\n    const result = React.useMemo(\n        () => dataMakesSense(data) ? calculate(data) : [],\n        [data]\n    );\n    let graph = <Graph result={result} />;\n    if (!result.length) {\n        makesSense = false;\n    }\n    return <>\n        <Helmet>\n            <title>{t('core:title.browser.page', {pageTitle: t('core:pages.turnips')})}</title>\n        </Helmet>\n        <div style={{maxWidth: 800, margin: 'auto'}}>\n            <Card style={{margin: 16}}>\n                <CardHeader title={t('turnips:prices.title')} />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        {isXs && firstBuy}\n                        <Grid item xs={12} sm={6}>\n                            <TextField type=\"number\" fullWidth value={data.buy ?? ''} onChange={(event) => setData({buy: event.target.value ? +event.target.value : null})} label={t('turnips:prices.buy')} />\n                        </Grid>\n                        {!isXs && firstBuy}\n                        {weekDays.map((day) => (\n                            <React.Fragment key={day}>\n                                <Grid item xs={12} sm={6} key={`${day}am`}>\n                                    <TextField type=\"number\" fullWidth value={data[day].am ?? ''} onChange={(event) => setData({[day]: {am: event.target.value ? +event.target.value : null}})} label={t('core:time.meridian.am.long_day', {day: t(`core:time.weekday.${day}.long`)})} />\n                                </Grid>\n                                <Grid item xs={12} sm={6} key={`${day}pm`}>\n                                    <TextField type=\"number\" fullWidth value={data[day].pm ?? ''} onChange={(event) => setData({[day]: {pm: event.target.value ? +event.target.value : null}})} label={t('core:time.meridian.pm.long_day', {day: t(`core:time.weekday.${day}.long`)})} />\n                                </Grid>\n                            </React.Fragment>\n                        ))}\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth>\n                                <InputLabel id=\"comp-label\">{t('turnips:pattern.label')}</InputLabel>\n                                <Select\n                                    value={data.previousPattern}\n                                    onChange={(event) => setData(\n                                        {previousPattern: event.target.value as Pattern}\n                                    )}\n                                    labelId='pattern-label'\n                                    fullWidth\n                                >\n                                    <MenuItem value={Pattern.SMALL_SPIKE}>{t('turnips:pattern.small_spike')}</MenuItem>\n                                    <MenuItem value={Pattern.LARGE_SPIKE}>{t('turnips:pattern.large_spike')}</MenuItem>\n                                    <MenuItem value={Pattern.FLUCTUATING}>{t('turnips:pattern.fluctuating')}</MenuItem>\n                                    <MenuItem value={Pattern.DECREASING}>{t('turnips:pattern.decreasing')}</MenuItem>\n                                    <MenuItem value={Pattern.UNKNOWN}>{t('turnips:pattern.unknown')}</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <Button style={{height: '100%'}} fullWidth variant=\"contained\" color=\"primary\" onClick={nextWeek}>{t('turnips:ui.start_next')}</Button>\n                        </Grid>\n                    </Grid>\n                    {makesSense || <>\n                        <br />\n                        <Centred>\n                            <div\n                                style={{\n                                    display: 'inline-flex',\n                                    justifyContent: 'center',\n                                    height: '100%',\n                                    color: theme.palette.error.main,\n                                    paddingRight: 8\n                                }}\n                            >\n                                <Warning />\n                            </div>\n                            <Typography color=\"error\">{t('turnips:ui.bad_data')}</Typography>\n                        </Centred>\n                    </>\n                    }\n                </CardContent>\n            </Card>\n            {graph}\n        </div>\n        <Dialog open={confirmOpen}>\n            <DialogTitle>{t('turnips:ui.reset_dialogue.title')}</DialogTitle>\n            <DialogContent>\n                {t('turnips:ui.reset_dialogue.text')}\n                <br />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={noConfirm}\n                            onChange={(event) => setNoConfirm(event.target.checked)}\n                            color=\"primary\"\n                        />\n                    }\n                    label={t('core:ui.dont_ask')}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => setConfirmOpen(false)}>\n                    {t('core:ui.cancel')}\n                </Button>\n                <Button onClick={confirm}>\n                    {t('core:ui.confirm')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    </>;\n}"],"sourceRoot":""}